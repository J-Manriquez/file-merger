// Archivo: extension.js
"use strict";var S=Object.create;var d=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var F=Object.getOwnPropertyNames;var P=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var M=(o,e)=>{for(var t in e)d(o,t,{get:e[t],enumerable:!0})},f=(o,e,t,s)=>{if(e&&typeof e=="object"||typeof e=="function")for(let i of F(e))!x.call(o,i)&&i!==t&&d(o,i,{get:()=>e[i],enumerable:!(s=u(e,i))||s.enumerable});return o};var a=(o,e,t)=>(t=o!=null?S(P(o)):{},f(e||!o||!o.__esModule?d(t,"default",{value:o,enumerable:!0}):t,o)),A=o=>f(d({},"__esModule",{value:!0}),o);var C={};M(C,{activate:()=>y});module.exports=A(C);var n=a(require("vscode"));var r=a(require("vscode")),g=class{constructor(e,t){this.storage=e;this.fileManager=t;this.currentSelection=[]}async saveCurrentSelection(e){this.currentSelection.length>0?(this.storage.saveSelection(e,this.currentSelection),r.window.showInformationMessage(`Selection "${e}" saved successfully`)):r.window.showWarningMessage("No files selected to save")}getSavedSelectionsProvider(){return{getTreeItem:e=>e,getChildren:()=>this.storage.getAllSelections().map(e=>{let t=new r.TreeItem(e.name);return t.contextValue="savedSelection",t.command={command:"fileMerger.useSelection",title:"Use Selection",arguments:[e]},t})}}getActiveSelectionsProvider(){return{getTreeItem:e=>e,getChildren:()=>this.storage.getActiveSelections().map(e=>{let t=new r.TreeItem(e.name);return t.contextValue="activeSelection",t})}}async createNewSelection(){let e=await r.window.showOpenDialog({canSelectMany:!0,canSelectFolders:!0});if(e){let t=await this.expandFolders(e.map(s=>s.fsPath));await this.fileManager.mergeFiles(t)}}async expandFolders(e){let t=[];for(let s of e)if((await r.workspace.fs.stat(r.Uri.file(s))).type===r.FileType.Directory){let h=await r.workspace.findFiles(new r.RelativePattern(s,"**/*"));t.push(...h.map(w=>w.fsPath))}else t.push(s);return t}};var c=a(require("vscode")),l=a(require("fs")),v=a(require("path")),m=class{constructor(){this.fileWatchers=new Map}async mergeSelectedFiles(){let e=Array.from(this.fileWatchers.keys());e.length>0?await this.mergeFiles(e):c.window.showWarningMessage("No files selected to merge")}getOutputPath(){let e=c.workspace.workspaceFolders;if(!e)throw new Error("No workspace folder open");let t=e[0].uri.fsPath;return v.join(t,"merged_script.txt")}async mergeFiles(e){try{let t=await this.generateMergedContent(e),s=this.getOutputPath();await l.promises.writeFile(s,t,"utf8"),this.watchFiles(e,s),c.window.showInformationMessage("Files merged successfully!")}catch(t){let s=t instanceof Error?t.message:"Unknown error occurred";c.window.showErrorMessage(`Error merging files: ${s}`)}}async generateMergedContent(e){let t="";for(let s of e){let i=await l.promises.readFile(s,"utf8");t+=`Ruta al script: ${s}
`,t+=`Nombre del script: ${v.basename(s)}
`,t+=`Contenido del script:
${i}
`,t+=`
--------------------------------------------------

`}return t}watchFiles(e,t){e.forEach(s=>{let i=l.watch(s,()=>{this.mergeFiles(e)});this.fileWatchers.set(s,i)})}stopWatching(e){e.forEach(t=>{let s=this.fileWatchers.get(t);s&&(s.close(),this.fileWatchers.delete(t))})}};var p=class{constructor(e){this.context=e}saveSelection(e,t){let s=this.getAllSelections();s.push({name:e,files:t,isActive:!1}),this.context.globalState.update("selections",s)}getAllSelections(){return this.context.globalState.get("selections",[])}getActiveSelections(){return this.getAllSelections().filter(e=>e.isActive)}toggleSelectionActive(e){let t=this.getAllSelections(),s=t.find(i=>i.name===e);s&&(s.isActive=!s.isActive,this.context.globalState.update("selections",t))}deleteSelection(e){let s=this.getAllSelections().filter(i=>i.name!==e);this.context.globalState.update("selections",s)}};function y(o){let e=new p(o),t=new m,s=new g(e,t);n.window.registerTreeDataProvider("savedSelections",s.getSavedSelectionsProvider()),n.window.registerTreeDataProvider("activeSelections",s.getActiveSelectionsProvider()),o.subscriptions.push(n.commands.registerCommand("fileMerger.newSelection",()=>{s.createNewSelection()}),n.commands.registerCommand("fileMerger.saveSelection",async()=>{let i=await n.window.showInputBox({prompt:"Enter a name for this selection"});i&&s.saveCurrentSelection(i)}),n.commands.registerCommand("fileMerger.mergeFiles",()=>{t.mergeSelectedFiles()}))}0&&(module.exports={activate});


// Archivo: extension.js.map
{
  "version": 3,
  "sources": ["../src/extension.ts", "../src/providers/SelectionProvider.ts", "../src/managers/FileManager.ts", "../src/storage/SelectionStorage.ts"],
  "mappings": "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",
  "names": ["vscode", "path", "vscode"]
}


// Archivo: esbuild.js
const esbuild = require("esbuild");

const production = process.argv.includes('--production');
const watch = process.argv.includes('--watch');

/**
 * @type {import('esbuild').Plugin}
 */
const esbuildProblemMatcherPlugin = {
	name: 'esbuild-problem-matcher',

	setup(build) {
		build.onStart(() => {
			console.log('[watch] build started');
		});
		build.onEnd((result) => {
			result.errors.forEach(({ text, location }) => {
				console.error(`âœ˜ [ERROR] ${text}`);
				console.error(`    ${location.file}:${location.line}:${location.column}:`);
			});
			console.log('[watch] build finished');
		});
	},
};

async function main() {
	const ctx = await esbuild.context({
		entryPoints: [
			'src/extension.ts'
		],
		bundle: true,
		format: 'cjs',
		minify: production,
		sourcemap: !production,
		sourcesContent: false,
		platform: 'node',
		outfile: 'dist/extension.js',
		external: ['vscode'],
		logLevel: 'silent',
		plugins: [
			/* add to the end of plugins array */
			esbuildProblemMatcherPlugin,
		],
	});
	if (watch) {
		await ctx.watch();
	} else {
		await ctx.rebuild();
		await ctx.dispose();
	}
}

main().catch(e => {
	console.error(e);
	process.exit(1);
});


// Archivo: package.json
{
    "name": "file-merger",
    "displayName": "file-merger",
    "description": "Merge multiple files into a single script with custom format",
    "version": "0.0.1",
    "license": "MIT",
    "engines": {
        "vscode": "^1.96.0"
    },
    "categories": [
        "Other"
    ],
    "activationEvents": [
        "onView:fileMergerExplorer"
    ],
    "main": "./dist/extension.js",
    "contributes": {
        "viewsContainers": {
            "activitybar": [
                {
                    "id": "file-merger",
                    "title": "File Merger",
                    "icon": "resources/merger.svg"
                }
            ]
        },
        "views": {
            "file-merger": [
                {
                    "id": "savedSelections",
                    "name": "Saved Selections"
                },
                {
                    "id": "activeSelections",
                    "name": "Active Selections"
                },
                {
                    "id": "newSelection",
                    "name": "New Selection"
                }
            ]
        },
        "commands": [
            {
                "command": "fileMerger.newSelection",
                "title": "Create New Selection"
            },
            {
                "command": "fileMerger.saveSelection",
                "title": "Save Current Selection"
            },
            {
                "command": "fileMerger.mergeFiles",
                "title": "Merge Selected Files"
            }
        ]
    },
    "scripts": {
        "vscode:prepublish": "npm run compile",
        "compile": "node esbuild.js --production",
        "watch": "node esbuild.js --watch",
        "lint": "eslint src --ext ts"
    },
    "devDependencies": {
        "@types/mocha": "^10.0.10",
        "@types/node": "20.x",
        "@types/vscode": "^1.96.0",
        "@typescript-eslint/eslint-plugin": "^8.17.0",
        "@typescript-eslint/parser": "^8.17.0",
        "@vscode/test-cli": "^0.0.10",
        "@vscode/test-electron": "^2.4.1",
        "esbuild": "^0.24.2",
        "eslint": "^9.16.0",
        "npm-run-all": "^4.1.5",
        "typescript": "^5.7.2"
    }
}


// Archivo: extension.ts
// src/extension.ts
import * as vscode from 'vscode';
import { SelectionProvider } from './providers/SelectionProvider';
import { FileManager } from './managers/FileManager';
import { SelectionStorage } from './storage/SelectionStorage';

export function activate(context: vscode.ExtensionContext) {
    const storage = new SelectionStorage(context);
    const fileManager = new FileManager();
    const selectionProvider = new SelectionProvider(storage, fileManager);

    // Registrar proveedores de vista
    vscode.window.registerTreeDataProvider(
        'savedSelections',
        selectionProvider.getSavedSelectionsProvider()
    );

    vscode.window.registerTreeDataProvider(
        'activeSelections',
        selectionProvider.getActiveSelectionsProvider()
    );

    // Registrar comandos
    context.subscriptions.push(
        vscode.commands.registerCommand('fileMerger.newSelection', () => {
            selectionProvider.createNewSelection();
        }),

        vscode.commands.registerCommand('fileMerger.saveSelection', async () => {
            const name = await vscode.window.showInputBox({
                prompt: 'Enter a name for this selection'
            });
            if (name) {
                selectionProvider.saveCurrentSelection(name);
            }
        }),

        vscode.commands.registerCommand('fileMerger.mergeFiles', () => {
            fileManager.mergeSelectedFiles();
        })
    );
}

// Archivo: FileManager.ts
// src/managers/FileManager.ts
import * as vscode from 'vscode';
import * as fs from 'fs';
import * as path from 'path';

export class FileManager {
    private fileWatchers: Map<string, fs.FSWatcher> = new Map();

    async mergeSelectedFiles(): Promise<void> {
        const files = Array.from(this.fileWatchers.keys());
        if (files.length > 0) {
            await this.mergeFiles(files);
        } else {
            vscode.window.showWarningMessage('No files selected to merge');
        }
    }

    // AÃ±adir el mÃ©todo getOutputPath
    private getOutputPath(): string {
        const workspaceFolders = vscode.workspace.workspaceFolders;
        if (!workspaceFolders) {
            throw new Error('No workspace folder open');
        }

        const rootPath = workspaceFolders[0].uri.fsPath;
        return path.join(rootPath, 'merged_script.txt');
    }

    async mergeFiles(files: string[]): Promise<void> {
        try {
            const mergedContent = await this.generateMergedContent(files);
            const outputPath = this.getOutputPath();

            await fs.promises.writeFile(outputPath, mergedContent, 'utf8');
            this.watchFiles(files, outputPath);

            vscode.window.showInformationMessage('Files merged successfully!');
        } catch (error: unknown) {
            // Corregir el manejo del error
            const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
            vscode.window.showErrorMessage(`Error merging files: ${errorMessage}`);
        }
    }

    private async generateMergedContent(files: string[]): Promise<string> {
        let content = '';

        for (const file of files) {
            const fileContent = await fs.promises.readFile(file, 'utf8');
            content += `Ruta al script: ${file}\n`;
            content += `Nombre del script: ${path.basename(file)}\n`;
            content += `Contenido del script:\n${fileContent}\n`;
            content += '\n--------------------------------------------------\n\n';
        }

        return content;
    }

    private watchFiles(files: string[], outputPath: string): void {
        files.forEach(file => {
            const watcher = fs.watch(file, () => {
                this.mergeFiles(files); // Actualizar cuando hay cambios
            });
            this.fileWatchers.set(file, watcher);
        });
    }

    stopWatching(files: string[]): void {
        files.forEach(file => {
            const watcher = this.fileWatchers.get(file);
            if (watcher) {
                watcher.close();
                this.fileWatchers.delete(file);
            }
        });
    }
}


// Archivo: SelectionEventHandler.ts
// src/providers/SelectionEventHandler.ts
import * as vscode from 'vscode';

export class SelectionEventHandler {
    private static instance: SelectionEventHandler;
    private _onDidChangeSelection = new vscode.EventEmitter<void>();
    readonly onDidChangeSelection = this._onDidChangeSelection.event;

    private constructor() { }

    static getInstance(): SelectionEventHandler {
        if (!SelectionEventHandler.instance) {
            SelectionEventHandler.instance = new SelectionEventHandler();
        }
        return SelectionEventHandler.instance;
    }

    notifySelectionChanged(): void {
        this._onDidChangeSelection.fire();
    }
}

// Archivo: SelectionProvider.ts
// src/providers/SelectionProvider.ts
import * as vscode from 'vscode';
import { SelectionStorage } from '../storage/SelectionStorage';
import { FileManager } from '../managers/FileManager';

export class SelectionProvider {
    private currentSelection: string[] = [];

    constructor(
        private storage: SelectionStorage,
        private fileManager: FileManager
    ) { }

    // AÃ±adir el mÃ©todo que faltaba
    async saveCurrentSelection(name: string): Promise<void> {
        if (this.currentSelection.length > 0) {
            this.storage.saveSelection(name, this.currentSelection);
            vscode.window.showInformationMessage(`Selection "${name}" saved successfully`);
        } else {
            vscode.window.showWarningMessage('No files selected to save');
        }
    }

    getSavedSelectionsProvider(): vscode.TreeDataProvider<vscode.TreeItem> {
        return {
            getTreeItem: (element) => element,
            getChildren: () => {
                return this.storage.getAllSelections().map(selection => {
                    const item = new vscode.TreeItem(selection.name);
                    item.contextValue = 'savedSelection';
                    item.command = {
                        command: 'fileMerger.useSelection',
                        title: 'Use Selection',
                        arguments: [selection]
                    };
                    return item;
                });
            }
        };
    }

    getActiveSelectionsProvider(): vscode.TreeDataProvider<vscode.TreeItem> {
        return {
            getTreeItem: (element) => element,
            getChildren: () => {
                return this.storage.getActiveSelections().map(selection => {
                    const item = new vscode.TreeItem(selection.name);
                    item.contextValue = 'activeSelection';
                    return item;
                });
            }
        };
    }

    async createNewSelection(): Promise<void> {
        const files = await vscode.window.showOpenDialog({
            canSelectMany: true,
            canSelectFolders: true
        });

        if (files) {
            const expandedFiles = await this.expandFolders(files.map(f => f.fsPath));
            await this.fileManager.mergeFiles(expandedFiles);
        }
    }


    private async expandFolders(paths: string[]): Promise<string[]> {
        const expandedFiles: string[] = [];

        for (const path of paths) {
            const stat = await vscode.workspace.fs.stat(vscode.Uri.file(path));
            if (stat.type === vscode.FileType.Directory) {
                const files = await vscode.workspace.findFiles(
                    new vscode.RelativePattern(path, '**/*')
                );
                expandedFiles.push(...files.map(f => f.fsPath));
            } else {
                expandedFiles.push(path);
            }
        }

        return expandedFiles;
    }

}

// Archivo: SelectionStorage.ts
// src/storage/SelectionStorage.ts
import * as vscode from 'vscode';

interface StoredSelection {
    name: string;
    files: string[];
    isActive: boolean;
}

export class SelectionStorage {
    private context: vscode.ExtensionContext;

    constructor(context: vscode.ExtensionContext) {
        this.context = context;
    }

    saveSelection(name: string, files: string[]): void {
        const selections = this.getAllSelections();
        selections.push({
            name,
            files,
            isActive: false
        });
        this.context.globalState.update('selections', selections);
    }

    getAllSelections(): StoredSelection[] {
        return this.context.globalState.get<StoredSelection[]>('selections', []);
    }

    getActiveSelections(): StoredSelection[] {
        return this.getAllSelections().filter(s => s.isActive);
    }

    toggleSelectionActive(name: string): void {
        const selections = this.getAllSelections();
        const selection = selections.find(s => s.name === name);
        if (selection) {
            selection.isActive = !selection.isActive;
            this.context.globalState.update('selections', selections);
        }
    }

    deleteSelection(name: string): void {
        const selections = this.getAllSelections();
        const updatedSelections = selections.filter(s => s.name !== name);
        this.context.globalState.update('selections', updatedSelections);
    }
}

// Archivo: tsconfig.json
{
    "compilerOptions": {
        "module": "commonjs",
        "target": "ES2020",
        "outDir": "out",
        "lib": [
            "ES2020"
        ],
        "sourceMap": true,
        "rootDir": "src",
        "strict": true
    },
    "exclude": [
        "node_modules",
        ".vscode-test"
    ]
}
